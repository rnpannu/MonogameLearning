
using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static MonogameLearning.src.Entity;

//using TiledSharp;

namespace MonogameLearning.src
{
    public class Game1 : Game
    {
        // Monogame
        private GraphicsDeviceManager graphics;
        private SpriteBatch spriteBatch;


        // Player
        private Texture2D playerSprite; // Objective: Load player sprite onto screen
        private Player player;


        // Tilemap
        private Dictionary<Vector2, int> foreGround;

        private Dictionary<Vector2, int> collisions;

        private Dictionary<Vector2, int> geometry;

        private Dictionary<Vector2, int> backGround;

        private FollowCamera camera;

        private int worldXShift = 0;
        private int worldYShift = 0;

        // Texture Atlas
        private Texture2D textureAtlas;

        int displayTilesize = 32; // Size of each tile on output display (scale)
        int pixelTileSize = 16; // Size of each tile in the atlas/map
        int numTilesPerRow = 113; // Number of tiles per row in the texture atlas
        

        /*
            Parse CSV file and load into dictionary
            Keys: A vector2 of (x, y) indices that are multiplied by the tile size in pixels
            Values: The left->right index value of each 16x16 block in the texture atlas
         */

        private Dictionary<Vector2, int> LoadMap(string filepath)
        {

            Dictionary<Vector2, int> result = new();

            try
            {
                using StreamReader reader = new(filepath);
                int y = 0;
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    string[] items = line.Split(','); // Array of strings
                    for (int x = 0; x < items.Length; x++)
                    {
                        if (int.TryParse(items[x], out int value))
                        {
                            if (value > -1)
                            {
                                result[new Vector2(x, y)] = value;
                            }
                        }
                    }
                    y++;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error reading file:");
                Console.WriteLine(e.Message);
            }

            return result;
        }

        /*
         * Draw the layer from the csv based on values in the texture atlas (generated by Tiled)
         * Will likely need to abstract into level/texture handler class(es) in the future
         */
        private void DrawLayer(Dictionary<Vector2, int> layer, SpriteBatch spriteBatch)
        {
            int xOffset;
            int yOffset;
            foreach (var item in layer)
            {
                //if (worldXShift < graphics.PreferredBackBufferWidth / 2 ||  worldXShift < graphics.PreferredBackBufferWidth / 2 + displayTilesize * layer.Count)
                xOffset = (int)item.Key.X * displayTilesize + worldXShift;
                yOffset = (int)item.Key.Y * displayTilesize + worldYShift;
                Rectangle drect = new Rectangle(
                    xOffset,
                    yOffset,
                    displayTilesize,
                    displayTilesize
                    );
                int x = item.Value % numTilesPerRow;
                int y = item.Value / numTilesPerRow;
                Rectangle srect = new Rectangle(
                    (int)x * pixelTileSize,
                    (int)y * pixelTileSize,
                    pixelTileSize,
                    pixelTileSize);
                spriteBatch.Draw(textureAtlas, drect, srect, Color.White);
            }
        }


        public Game1()
        {
            Drawing.Initialize(this);
            Content.RootDirectory = "Content";
            IsMouseVisible = true;

            camera = new(Vector2.Zero);
        }

        protected override void Initialize()
        {

            //graphics.PreferredBackBufferWidth = 1920;
            //graphics.PreferredBackBufferHeight = 1080;
            //graphics.ApplyChanges();
            base.Initialize();
            
        }

        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // Player

            Vector2 playerPosition = new Vector2(Drawing.width/2, Drawing.height / 2);
            player = new Player(Content, playerPosition);

            textureAtlas = Content.Load<Texture2D>("Cave Tileset\\full");

            backGround = LoadMap("../../../Data/Level1_background.csv");
            geometry = LoadMap("../../../Data/Level1_geometry.csv");
            collisions = LoadMap("../../../Data/Level1_collisions.csv");



        }

        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
            {
                Exit();
            }

            KeyboardState keyboard = Keyboard.GetState();
            bool idle = true;
            if (keyboard.IsKeyDown(Keys.W))
            {
                worldYShift += 10;
            }
            if (keyboard.IsKeyDown(Keys.S))
            {
                worldYShift -= 10;
            }
            if (keyboard.IsKeyDown(Keys.A))
            {
                worldXShift += 10;
            }
            if (keyboard.IsKeyDown(Keys.D))
            {
                worldXShift -= 10;
            }

            Drawing.Update(gameTime, this);
            Window.Title = "FPS: " + Drawing.fps.ToString();
            player.Update(gameTime);
            camera.Follow(player.position);
            base.Update(gameTime);
        }

        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.DarkSlateGray);
            spriteBatch.Begin(transformMatrix: camera.transform, samplerState: SamplerState.PointClamp);

            DrawLayer(backGround, spriteBatch);
            DrawLayer(geometry, spriteBatch);
            player.Draw(spriteBatch, camera.position);
            spriteBatch.End();

            base.Draw(gameTime);
        }
    }
}
